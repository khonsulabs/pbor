searchState.loadedDescShard("pot", 0, "A concise storage format, written for <code>BonsaiDb</code>.\nA boolean value\nA value containing arbitrary bytes.\nCompatibility settings for Pot.\nSerialization and deserialization configuration.\nA custom deserialization error. These errors originate …\nExpected more data but encountered the end of the input.\nContains the error value\nAll errors that Pot may return.\nA kind of data was expected, but the <code>Value</code> cannot be …\nA floating point value.\nSerializes data that is compatible with all versions of Pot\nA numerical value could not be handled without losing …\nData was written with an incompatible version.\nAn integer value.\nAn atom header was incorrectly formatted.\nAn unknown kind was encountered. Generally a sign that …\nString data contained invalid UTF-8 characters.\nAn IO error occurred.\nA sequence of key-value mappings.\nA generic error occurred.\nA value representing <code>None</code>.\nPayload is not a Pot payload.\nContains the success value\nA Value&lt;&#39;static&gt; wrapper that supports <code>DeserializeOwned</code>.\nA result alias that returns <code>Error</code>.\nA sequence of values.\nA sequence of unknown size cannot be serialized.\nA string value.\nThe amount of data read exceeds the configured maximum …\nExtra data appeared at the end of the input.\nEncountered an unexpected atom kind.\nA value representing unit (<code>()</code>).\nAn unknown <code>Special</code> was encountered.\nA requested symbol id was not found.\nAn unsupported byte count for a numeric type was …\nSerializes data in the default format\nA Pot-encoded value. This type can be used to deserialize …\nAn error from deserializing a type using …\nAn iterator over values contained within a <code>Value</code>.\nSets the maximum number of bytes able to be allocated. …\nReturns the value as a <code>bool</code>.\nReturns the value as bytes, or <code>None</code> if the value is not …\nReturns the value as an <code>Float</code>. Returns <code>None</code> if the value …\nReturns the value as an <code>Integer</code>. Returns <code>None</code> if the value …\nReturns the value as a string, or <code>None</code> if the value is not …\nSets the compatibility mode for serializing and returns …\nTypes for deserializing pots.\nDeserializes a value from a slice using the configured …\nAttempts to create an instance of <code>T</code> from this value.\nDeserializes a value from a <code>Read</code> implementer using the …\nLow-level interface for reading and writing the pot format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new value from an iterator of 2-element tuples …\nRestores a previously Pot-serialized value from a <code>Read</code> …\nReturns a new value from an iterator of items that can be …\nCreates a <code>Value</code> from the given Serde-compatible type.\nRestores a previously Pot-serialized value from a slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> to a <code>&#39;static</code> lifetime by cloning any …\nReturns <code>true</code> if the value contained is considered empty.\nReturns an iterator that iterates over all mappings …\nReturns the default configuration.\nTypes for reading data.\nTypes for serializing pots.\nSerializes a value to a <code>Vec</code> using the configured options.\nSerializes a value to a writer using the configured …\nConverts <code>self</code> to a <code>&#39;static</code> lifetime by cloning all data.\nSerialize <code>value</code> using Pot into a <code>Vec&lt;u8&gt;</code>.\nSerialize <code>value</code> using Pot into <code>writer</code>.\nReturns an iterator that iterates over all values …\nThe kind of data expected.\nThe value that was encountered.\nA symbol that has been borrowed from the data being …\nDeserializer for the Pot format.\nA symbol that is stored inside of the <code>SymbolList</code>.\nA collection of symbols accumulated during deserialization.\nAn alias to a <code>SymbolList</code> with a static lifetime. This type …\nA reference to a <code>SymbolList</code>.\nA symbol stored in a <code>SymbolList</code>.\nDeserializes <code>T</code> from <code>reader</code>.\nDeserializes <code>T</code> from <code>reader</code>.\nDeserializes <code>T</code> from <code>slice</code>.\nDeserializes <code>T</code> from <code>slice</code>.\nReturns a deserializer for <code>reader</code>.\nReturns a deserializer for <code>reader</code>.\nReturns a deserializer for <code>slice</code> that reuses symbol ids.\nReturns a deserializer for <code>slice</code> that reuses symbol ids.\nReturns <code>true</code> if the input has been consumed completely.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the symbol stored at <code>index</code>, or <code>None</code> if <code>index</code> is out …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no symbols in this list.\nReturns the number of entries in the symbol list.\nReturns a new, empty symbol list.\nPush a symbol that cannot be borrowed from the …\nPush a symbol that has been borrowed from the …\nAn encoded <code>Kind</code>, argument, and optional contained value.\nA boolean value.\nA series of bytes. The argument is the length. The bytes …\nA buffer of bytes.\nA terminal value for a <code>Self::DynamicMap</code>.\nA marker denoting the end of a map with unknown length.\nA sequence of key-value pairs with an unknown length.\nA marker denoting a map with unknown length is next in the …\nThe <code>false</code> boolean literal.\nA floating point number that can safely convert between …\nA floating point value. Argument is the byte length, minus …\nA floating point value.\nA signed integer. Argument is the byte length, minus one. …\nAn integer type that can safely convert between other …\nAn integer value.\nThe type of an atom.\nA list of key-value pairs. Argument is the count of …\nA named value. A symbol followed by another value.\nA named value.\nA None value.\nA value contained within an <code>Atom</code>.\nA list of atoms. Argument is the count of atoms in the …\nA special value type.\nA value with a special meaning.\nA symbol. If the least-significant bit of the arg is 0, …\nThe <code>true</code> boolean literal.\nAn unsigned integer. Argument is the byte length, minus …\nA Unit value.\nA unit.\nAn unknown <code>Special</code> was encountered.\nThe argument contained in the atom header.\nConverts this integer to an f32, but only if it can be …\nReturns this number as an f32, if it can be done without …\nConverts this integer to an f64, but only if it can be …\nReturns this number as an f64.\nConverts this integer to an f64, but only if it can be …\nReturns the contained value as an i64, or an error if the …\nReturns the contained value as an i16, or an error if the …\nReturns the contained value as an i32, or an error if the …\nReturns the contained value as an i64, or an error if the …\nReturns the contained value as an i8, or an error if the …\nReturns this number as an <code>Integer</code>, if the stored value has …\nReturns the contained value as an u64, or an error if the …\nReturns the contained value as an u16, or an error if the …\nReturns the contained value as an u32, or an error if the …\nReturns the contained value as an u64, or an error if the …\nReturns the contained value as an u8, or an error if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from a u8. Returns an error if <code>kind</code> is an invalid …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the value contained is zero.\nReturns true if the value contained is zero.\nThe type of atom.\nThe contained value, if any.\nReads an atom.\nReads an atom header (kind and argument).\nReads an integer based on the atom header (<code>kind</code> and …\nReads a floating point number given the atom <code>kind</code> and …\nReads a Pot header. See <code>write_header</code> for more information. …\nWrites an atom header into <code>writer</code>.\nWrites a <code>Kind::Special</code> atom with either <code>Special::True</code> or …\nWrites an <code>Kind::Bytes</code> atom with the given value.\nWrites an <code>Kind::Float</code> atom with the given value.\nWrites an <code>Kind::Float</code> atom with the given value.\nWrites the Pot header. A u32 written in big endian. The …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites a <code>Kind::Special</code> atom with <code>Special::Named</code>.\nWrites a <code>Kind::Special</code> atom with <code>Special::None</code>.\nWrites a <code>Kind::Special</code> atom.\nWrites an <code>Kind::Bytes</code> atom with the bytes of the string.\nWrites this value using the smallest form possible.\nWrites this value using the smallest form possible.\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::Int</code> atom with the given value. Will encode …\nWrites an <code>Kind::UInt</code> atom with the given value.\nWrites a <code>Kind::Special</code> atom with <code>Special::Unit</code>.\nBytes that have been read into a buffer.\nThe bytes that have been read can be borrowed from the …\nA reader over <code>ReadBytesExt</code>.\nA reader that can temporarily buffer bytes read.\nThe bytes that have been read have been stored in the …\nReads data from a slice.\nResolves the bytes to a byte slice.\nReads exactly <code>length</code> bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are no bytes remaining to read.\nReturns the remaining bytes to read.\nSerializes map-like values.\nA Pot serializer.\nA list of previously serialized symbols.\nA <code>Serialize</code> implementation returned an error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts <code>symbol</code> into this map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the map has no entries.\nReturns the number of entries in this map.\nReturns a new serializer outputting written bytes into …\nReturns a new, empty symbol map.\nReturns a new serializer outputting written bytes into …\nAdds all symbols encountered in <code>value</code>.\nSerializes <code>value</code> into <code>writer</code> while persisting symbols into …\nSerializes <code>value</code> into a new <code>Vec&lt;u8&gt;</code> while persisting …\nReturns a serializer that writes into <code>output</code> and persists …\nSets the compatibility mode for serializing.\nSets the compatibility mode for serializing and returns …")