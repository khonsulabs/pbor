var searchIndex = JSON.parse('{\
"pot":{"doc":"A concise storage format, written for <code>BonsaiDb</code>.","t":"NNDNNENNNNNNNNNNNNNDGNNNNNNNNEELLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLFLLLLLLLLLLAALLLLLLLLLLLFFLLLLLLLLLLLLLLLLMMNDNDGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNNNNNNNNDNNNDNENNNNENENNNNNNMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMFFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFLLFFFFFFFFENDINDLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Bool","Bytes","Config","Custom","Eof","Error","Expected","Float","ImpreciseCastWouldLoseData","IncompatibleVersion","Integer","InvalidAtomHeader","InvalidKind","InvalidUtf8","Io","Mappings","Message","None","NotAPot","OwnedValue","Result","Sequence","SequenceSizeMustBeKnown","String","TooManyBytesRead","TrailingBytes","UnexpectedKind","Unit","UnknownSymbol","Value","ValueError","allocation_budget","as_bool","as_bytes","as_float","as_integer","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","custom","custom","custom","custom","de","default","deref","deref_mut","deserialize","deserialize","deserialize","deserialize_as","deserialize_from","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mappings","from_reader","from_sequence","from_serialize","from_slice","into","into","into","into","into","into_static","is_empty","mappings","provide","provide","reader","ser","serialize","serialize","serialize","serialize_into","to_owned","to_owned","to_owned","to_static","to_string","to_string","to_string","to_vec","to_writer","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","values","kind","value","Data","Deserializer","InList","SymbolList","SymbolMap","SymbolMapRef","SymbolStr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","deserializer_for","deserializer_for","deserializer_for_slice","deserializer_for_slice","end_of_input","fmt","fmt","fmt","from","from","from","from","get","into","into","into","into","is_empty","is_human_readable","len","new","newtype_variant_seed","push","push_borrowed","struct_variant","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tuple_variant","type_id","type_id","type_id","type_id","unit_variant","variant_seed","Atom","Boolean","Bytes","Bytes","DynamicEnd","DynamicEnd","DynamicMap","DynamicMap","False","Float","Float","Float","Int","Integer","Integer","Kind","Map","Named","Named","None","Nucleus","Sequence","Special","Special","Symbol","True","UInt","Unit","Unit","arg","as_f32","as_f32","as_f64","as_f64","as_float","as_i128","as_i16","as_i32","as_i64","as_i8","as_integer","as_u128","as_u16","as_u32","as_u64","as_u8","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","deserialize","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_u8","into","into","into","into","into","into","is_zero","is_zero","kind","nucleus","read_atom","read_atom_header","read_from","read_from","read_header","serialize","serialize","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write_atom_header","write_bool","write_bytes","write_f32","write_f64","write_header","write_i128","write_i16","write_i24","write_i32","write_i48","write_i64","write_i8","write_named","write_none","write_special","write_str","write_to","write_to","write_u128","write_u16","write_u24","write_u32","write_u48","write_u64","write_u8","write_unit","BufferedBytes","Data","IoReader","Reader","Scratch","SliceReader","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffered_read_bytes","buffered_read_bytes","buffered_read_bytes","fmt","fmt","from","from","from","from","into","into","into","is_empty","len","read","read","read_exact","read_exact","read_to_end","read_to_string","read_vectored","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","MapSerializer","Serializer","SymbolMap","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","end","end","end","end","end","end","end","fmt","fmt","from","from","from","into","into","into","is_human_readable","new","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serializer_for","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"pot"],[156,"pot::ValueError"],[158,"pot::de"],[246,"pot::format"],[411,"pot::reader"],[454,"pot::ser"]],"d":["A boolean value","A value containing arbitrary bytes.","Serialization and deserialization configuration.","A custom deserialization error. These errors originate …","Expected more data but encountered the end of the input.","All errors that Pot may return.","A kind of data was expected, but the <code>Value</code> cannot be …","A floating point value.","A numerical value could not be handled without losing …","Data was written with an incompatible version.","An integer value.","An atom header was incorrectly formatted.","An unknown kind was encountered. Generally a sign that …","String data contained invalid UTF-8 characters.","An IO error occurred.","A sequence of key-value mappings.","A generic error occurred.","A value representing <code>None</code>.","Payload is not a Pot payload.","A Value&lt;&#39;static&gt; wrapper that supports <code>DeserializeOwned</code>.","A result alias that returns <code>Error</code>.","A sequence of values.","A sequence of unknown size cannot be serialized.","A string value.","The amount of data read exceeds the configured maximum …","Extra data appeared at the end of the input.","Encountered an unexpected atom kind.","A value representing unit (<code>()</code>).","A requested symbol id was not found.","A Pot-encoded value. This type can be used to deserialize …","An error from deserializing a type using …","Sets the maximum number of bytes able to be allocated. …","Returns the value as a <code>bool</code>.","Returns the value as bytes, or <code>None</code> if the value is not …","Returns the value as an <code>Float</code>. Returns <code>None</code> if the value …","Returns the value as an <code>Integer</code>. Returns <code>None</code> if the value …","Returns the value as a string, or <code>None</code> if the value is not …","","","","","","","","","","","","","","","","","","","","","Types for deserializing pots.","","","","","","Deserializes a value from a slice using the configured …","Attempts to create an instance of <code>T</code> from this value.","Deserializes a value from a <code>Read</code> implementer using the …","","","","","","","","","","","","Low-level interface for reading and writing the pot format.","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new value from an iterator of 2-element tuples …","Restores a previously Pot-serialized value from a <code>Read</code> …","Returns a new value from an iterator of items that can be …","Creates a <code>Value</code> from the given Serde-compatible type.","Restores a previously Pot-serialized value from a slice.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts <code>self</code> to a <code>&#39;static</code> lifetime by cloning any …","Returns <code>true</code> if the value contained is considered empty.","Returns an iterator that iterates over all mappings …","","","Types for reading data.","Types for serializing pots.","","","Serializes a value to a <code>Vec</code> using the configured options.","Serializes a value to a writer using the configured …","","","","Converts <code>self</code> to a <code>&#39;static</code> lifetime by cloning all data.","","","","Serialize <code>value</code> using Pot into a <code>Vec&lt;u8&gt;</code>.","Serialize <code>value</code> using Pot into <code>writer</code>.","","","","","","","","","","","","","","","","Returns an iterator that iterates over all values …","The kind of data expected.","The value that was encountered.","A symbol that has been borrowed from the data being …","Deserializer for the Pot format.","A symbol that is stored inside of the <code>SymbolList</code>.","A collection of symbols accumulated during deserialization.","An alias to a <code>SymbolList</code> with a static lifetime. This type …","A reference to a <code>SymbolList</code>.","A symbol stored in a <code>SymbolList</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a deserializer for <code>reader</code>.","Returns a deserializer for <code>reader</code>.","Returns a deserializer for <code>slice</code> that reuses symbol ids.","Returns a deserializer for <code>slice</code> that reuses symbol ids.","Returns <code>true</code> if the input has been consumed completely.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the symbol stored at <code>index</code>, or <code>None</code> if <code>index</code> is out …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if there are no symbols in this list.","","Returns the number of entries in the symbol list.","Returns a new, empty symbol list.","","Push a symbol that cannot be borrowed from the …","Push a symbol that has been borrowed from the …","","","","","","","","","","","","","","","","","An encoded <code>Kind</code>, argument, and optional contained value.","A boolean value.","A series of bytes. The argument is the length. The bytes …","A buffer of bytes.","A terminal value for a <code>Self::DynamicMap</code>.","A marker denoting the end of a map with unknown length.","A sequence of key-value pairs with an unknown length.","A marker denoting a map with unknown length is next in the …","The <code>false</code> boolean literal.","A floating point number that can safely convert between …","A floating point value. Argument is the byte length, minus …","A floating point value.","A signed integer. Argument is the byte length, minus one. …","An integer type that can safely convert between other …","An integer value.","The type of an atom.","A list of key-value pairs. Argument is the count of …","A named value. A symbol followed by another value.","A named value.","A None value.","A value contained within an <code>Atom</code>.","A list of atoms. Argument is the count of atoms in the …","A special value type.","A value with a special meaning.","A symbol. If the least-significant bit of the arg is 0, …","The <code>true</code> boolean literal.","An unsigned integer. Argument is the byte length, minus …","A Unit value.","A unit.","The argument contained in the atom header.","Converts this integer to an f32, but only if it can be …","Returns this number as an f32, if it can be done without …","Converts this integer to an f64, but only if it can be …","Returns this number as an f64.","Converts this integer to an f64, but only if it can be …","Returns the contained value as an i64, or an error if the …","Returns the contained value as an i16, or an error if the …","Returns the contained value as an i32, or an error if the …","Returns the contained value as an i64, or an error if the …","Returns the contained value as an i8, or an error if the …","Returns this number as an <code>Integer</code>, if the stored value has …","Returns the contained value as an u64, or an error if the …","Returns the contained value as an u16, or an error if the …","Returns the contained value as an u32, or an error if the …","Returns the contained value as an u64, or an error if the …","Returns the contained value as an u8, or an error if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts from a u8. Returns an error if <code>kind</code> is an invalid …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the value contained is zero.","Returns true if the value contained is zero.","The type of atom.","The contained value, if any.","Reads an atom.","Reads an atom header (kind and argument).","Reads an integer based on the atom header (<code>kind</code> and …","Reads a floating point number given the atom <code>kind</code> and …","Reads a Pot header. See <code>write_header</code> for more information. …","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes an atom header into <code>writer</code>.","Writes a <code>Kind::Special</code> atom with either <code>Special::True</code> or …","Writes an <code>Kind::Bytes</code> atom with the given value.","Writes an <code>Kind::Float</code> atom with the given value.","Writes an <code>Kind::Float</code> atom with the given value.","Writes the Pot header. A u32 written in big endian. The …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes a <code>Kind::Special</code> atom with <code>Special::Named</code>.","Writes a <code>Kind::Special</code> atom with <code>Special::None</code>.","Writes a <code>Kind::Special</code> atom.","Writes an <code>Kind::Bytes</code> atom with the bytes of the string.","Writes this value using the smallest form possible.","Writes this value using the smallest form possible.","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::Int</code> atom with the given value. Will encode …","Writes an <code>Kind::UInt</code> atom with the given value.","Writes a <code>Kind::Special</code> atom with <code>Special::Unit</code>.","Bytes that have been read into a buffer.","The bytes that have been read can be borrowed from the …","A reader over <code>ReadBytesExt</code>.","A reader that can temporarily buffer bytes read.","The bytes that have been read have been stored in the …","Reads data from a slice.","Resolves the bytes to a byte slice.","","","","","","","Reads exactly <code>length</code> bytes.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if there are no bytes remaining to read.","Returns the remaining bytes to read.","","","","","","","","","","","","","","","","","Serializes map-like values.","A Pot serializer.","A list of previously serialized symbols.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns a new serializer outputting written bytes into …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a serializer that writes into <code>output</code> and persists …","","","","","","","","",""],"i":[3,3,0,14,13,0,14,3,13,13,3,13,13,13,13,3,13,3,13,0,0,3,13,3,13,13,13,3,13,0,0,1,3,3,3,3,3,13,3,11,14,1,13,3,11,14,1,3,11,1,3,11,1,13,13,14,14,0,1,11,11,3,11,1,3,1,3,11,14,13,13,3,3,11,14,14,1,0,13,13,13,13,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,14,1,3,0,3,3,0,13,3,11,14,1,3,3,3,13,14,0,0,3,11,1,1,3,11,1,3,13,3,14,0,0,13,3,11,14,1,13,3,11,14,1,13,3,11,14,1,3,70,70,48,0,48,0,0,0,0,50,48,55,47,50,48,55,47,47,48,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,52,47,52,47,50,50,55,47,50,48,55,47,47,50,48,55,47,47,50,47,47,50,47,47,50,50,48,55,47,50,48,55,47,50,50,48,55,47,50,50,0,59,57,59,61,59,61,59,61,0,57,59,57,0,59,0,57,61,59,61,0,57,0,57,57,61,57,61,59,58,9,8,9,8,9,9,9,9,9,9,8,9,9,9,9,9,61,57,9,58,8,59,61,57,9,58,8,59,57,9,8,57,9,8,9,8,57,9,8,57,9,57,9,9,58,8,8,59,61,57,9,9,9,9,9,9,9,9,9,9,9,58,8,8,8,59,57,61,57,9,58,8,59,9,8,58,58,0,0,9,8,0,9,8,57,9,8,9,8,61,61,57,9,58,8,59,61,57,9,58,8,59,61,57,9,58,8,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,8,0,0,0,0,0,0,0,0,0,63,0,0,63,0,63,54,53,63,54,53,63,49,54,53,54,63,54,54,53,63,54,53,63,54,54,54,53,54,53,53,53,53,54,53,63,54,53,63,54,53,63,0,0,0,66,67,65,66,67,65,65,66,66,66,66,67,67,67,66,65,66,67,65,66,67,65,66,66,66,66,66,66,66,66,66,66,66,67,67,66,66,66,66,66,67,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,67,65,66,67,65,66,67,65,66,67,65],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[3,4],[3,[[7,[[6,[5]]]]]],[3,[[7,[8]]]],[3,[[7,[9]]]],[3,[[7,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[11,11],[1,1],[[]],[[]],[[]],[12,13],[12,13],[12,14],[12,14],0,[[],1],[11],[11],[15,[[16,[3]]]],[15,[[16,[11]]]],[[1,[6,[5]]],[[18,[17]]]],[3,[[16,[17,14]]]],[[1,19],[[18,[20]]]],[[3,3],4],[[11,11],4],[[14,14],4],[[13,21],22],[[13,21],22],[[3,21],22],[[3,21],22],[[11,21],22],[[14,21],22],[[14,21],22],[[1,21],22],0,[23,13],[24,13],[25,13],[[]],[5,3],[[],3],[[[26,[3]]],3],[27,3],[28,3],[[[26,[5]]],3],[29,3],[[]],[30,3],[26,3],[[[6,[5]]],3],[[[7,[3]]],3],[31,3],[32,3],[10,3],[33,3],[34,3],[35,3],[36,3],[37,3],[38,3],[[[39,[5]]],3],[4,3],[[]],[3,11],[3,11],[[]],[[]],[40,3],[19,[[18,[20]]]],[40,3],[41,[[16,[3,14]]]],[[[6,[5]]],[[18,[17]]]],[[]],[[]],[[]],[[]],[[]],[3,3],[3,4],[3,42],[43],[43],0,0,[[3,44],16],[[11,44],16],[[1,41],[[18,[[26,[5]]]]]],[[1,41,45],18],[[]],[[]],[[]],[3,3],[[],35],[[],35],[[],35],[41,[[18,[[26,[5]]]]]],[[41,45],18],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],46],[[],46],[[],46],[[],46],[[],46],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],47],[48],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],10,[6,[10]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],10,51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],10,[6,[10]],51],18],[[[50,[49]],2,51],18],[[[50,[49]],10,2,51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],51],18],[[[50,[49]],10,51],18],[[52,19],[[18,[[50,[[53,[19]]]]]]]],[[47,19],[[18,[[50,[[53,[19]]]]]]]],[[52,[6,[5]]],[[18,[[50,[54]]]]]],[[47,[6,[5]]],[[18,[[50,[54]]]]]],[[[50,[54]]],4],[[[50,[49]],21],22],[[55,21],22],[[47,21],22],[[]],[[]],[[]],[[]],[[47,2],[[7,[48]]]],[[]],[[]],[[]],[[]],[47,4],[[[50,[49]]],4],[47,2],[[],47],[[[50,[49]],56],18],[[47,10]],[[47,10]],[[[50,[49]],[6,[10]],51],18],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[50,[49]],2,51],18],[[],46],[[],46],[[],46],[[],46],[[[50,[49]]],18],[[[50,[49]],56],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,[[16,[31,13]]]],[8,[[16,[31,13]]]],[9,[[16,[33,13]]]],[8,33],[9,[[16,[8,13]]]],[9,[[16,[29,13]]]],[9,[[16,[32,13]]]],[9,[[16,[28,13]]]],[9,[[16,[36,13]]]],[9,[[16,[27,13]]]],[8,[[16,[9,13]]]],[9,[[16,[38,13]]]],[9,[[16,[34,13]]]],[9,[[16,[37,13]]]],[9,[[16,[30,13]]]],[9,[[16,[5,13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,57],[9,9],[8,8],[[]],[[]],[[]],[15,[[16,[9]]]],[15,[[16,[8]]]],[[57,57],4],[[9,9],4],[[8,8],4],[[],4],[[],4],[[57,21],22],[[9,21],22],[[9,21],22],[[58,21],22],[[8,21],22],[[8,21],22],[[59,21],22],[[]],[[]],[36,9],[28,9],[32,9],[29,9],[27,9],[5,9],[30,9],[[]],[34,9],[38,9],[37,9],[[]],[33,8],[31,8],[[]],[[]],[5,[[16,[57,13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[9,4],[8,4],0,0,[[49,2,[26,[5]]],[[16,[58,13]]]],[60,[[16,[13]]]],[[57,2,60],[[16,[9,13]]]],[[57,2,60],[[16,[8,13]]]],[60,[[16,[5,13]]]],[[9,44],16],[[8,44],16],[[]],[[]],[[]],[[],35],[[],35],[[],16],[30,[[16,[61]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[45,57,30],[[62,[2]]]],[[45,4],[[62,[2]]]],[[45,[6,[5]]],[[62,[2]]]],[[45,31],[[62,[2]]]],[[45,33],[[62,[2]]]],[[45,5],[[62,[2]]]],[[45,29],[[62,[2]]]],[[45,32],[[62,[2]]]],[[45,28],[[62,[2]]]],[[45,28],[[62,[2]]]],[[45,36],[[62,[2]]]],[[45,36],[[62,[2]]]],[[45,27],[[62,[2]]]],[45,[[62,[2]]]],[45,[[62,[2]]]],[[45,61],[[62,[2]]]],[[45,10],[[62,[2]]]],[[9,45],[[62,[2]]]],[[8,45],[[62,[2]]]],[[45,38],[[62,[2]]]],[[45,34],[[62,[2]]]],[[45,37],[[62,[2]]]],[[45,37],[[62,[2]]]],[[45,30],[[62,[2]]]],[[45,30],[[62,[2]]]],[[45,5],[[62,[2]]]],[45,[[62,[2]]]],0,0,0,0,0,0,[[63,[6,[5]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,[26,[5]]],[[16,[63,13]]]],[[54,2,[26,[5]]],[[16,[63,13]]]],[[[53,[60]],2,[26,[5]]],[[16,[63,13]]]],[[54,21],22],[[63,21],22],[[]],[[[6,[5]]],54],[[]],[[]],[[]],[[]],[[]],[54,4],[54,2],[[54,[6,[5]]],[[62,[2]]]],[[[53,[60]],[6,[5]]],[[62,[2]]]],[[54,[6,[5]]],62],[[[53,[60]],[6,[5]]],62],[[[53,[60]],[26,[5]]],[[62,[2]]]],[[[53,[60]],35],[[62,[2]]]],[[[53,[60]],[6,[64]]],[[62,[2]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],46],[[],46],[[],46],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],65],[[[66,[45]]],18],[[[66,[45]]],18],[[[66,[45]]],18],[[[66,[45]]],18],[[[67,[45]]],18],[[[67,[45]]],18],[[[67,[45]]],18],[[[66,[45]],21],22],[[65,21],22],[[]],[[]],[[]],[[]],[[]],[[]],[[[66,[45]]],4],[45,[[18,[[66,[45]]]]]],[[[66,[45]],4],18],[[[66,[45]],[6,[5]]],18],[[[66,[45]],68],18],[[[66,[45]],[0,[69,41]]],18],[[[66,[45]],[0,[69,41]]],18],[[[66,[45]],31],18],[[[66,[45]],33],18],[[[66,[45]],[0,[69,41]]],18],[[[66,[45]],[0,[69,41]]],18],[[[67,[45]],10,[0,[69,41]]],18],[[[67,[45]],10,[0,[69,41]]],18],[[[66,[45]],29],18],[[[66,[45]],32],18],[[[66,[45]],28],18],[[[66,[45]],36],18],[[[66,[45]],27],18],[[[67,[45]],[0,[69,41]]],18],[[[66,[45]],[7,[2]]],18],[[[66,[45]],10,[0,[69,41]]],18],[[[66,[45]],10,37,10,[0,[69,41]]],18],[[[66,[45]]],18],[[[66,[45]],[7,[2]]],18],[[[66,[45]],[0,[69,41]]],18],[[[66,[45]],10],18],[[[66,[45]],10,2],18],[[[66,[45]],10,37,10,2],18],[[[66,[45]],2],18],[[[66,[45]],10,2],18],[[[66,[45]],10,37,10,2],18],[[[66,[45]],38],18],[[[66,[45]],34],18],[[[66,[45]],37],18],[[[66,[45]],30],18],[[[66,[45]],5],18],[[[66,[45]]],18],[[[66,[45]],10],18],[[[66,[45]],10,37,10],18],[[[67,[45]],[0,[69,41]]],18],[[65,45],[[18,[[66,[45]]]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],46],[[],46],[[],46]],"c":[],"p":[[3,"Config"],[15,"usize"],[4,"Value"],[15,"bool"],[15,"u8"],[15,"slice"],[4,"Option"],[3,"Float"],[3,"Integer"],[15,"str"],[3,"OwnedValue"],[8,"Display"],[4,"Error"],[4,"ValueError"],[8,"Deserializer"],[4,"Result"],[8,"Deserialize"],[6,"Result"],[8,"Read"],[8,"DeserializeOwned"],[3,"Formatter"],[6,"Result"],[3,"Utf8Error"],[3,"FromUtf8Error"],[3,"Error"],[3,"Vec"],[15,"i8"],[15,"i32"],[15,"i128"],[15,"u64"],[15,"f32"],[15,"i16"],[15,"f64"],[15,"u16"],[3,"String"],[15,"i64"],[15,"u32"],[15,"u128"],[15,"array"],[8,"IntoIterator"],[8,"Serialize"],[3,"Iter"],[3,"Demand"],[8,"Serializer"],[8,"WriteBytesExt"],[3,"TypeId"],[3,"SymbolList"],[4,"SymbolStr"],[8,"Reader"],[3,"Deserializer"],[8,"Visitor"],[6,"SymbolMap"],[3,"IoReader"],[3,"SliceReader"],[3,"SymbolMapRef"],[8,"DeserializeSeed"],[4,"Kind"],[3,"Atom"],[4,"Nucleus"],[8,"ReadBytesExt"],[4,"Special"],[6,"Result"],[4,"BufferedBytes"],[3,"IoSliceMut"],[3,"SymbolMap"],[3,"Serializer"],[3,"MapSerializer"],[15,"char"],[8,"Sized"],[13,"Expected"]]},\
"xtask":{"doc":"","t":"ELLLLFLLLL","n":["Config","borrow","borrow_mut","from","into","main","paths","try_from","try_into","type_id"],"q":[[0,"xtask"]],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,6,6,6,6,0,6,6,6,6],"f":[0,[[]],[[]],[[]],[[]],[[],1],[[],[[3,[2]]]],[[],4],[[],4],[[],5]],"c":[],"p":[[6,"Result"],[3,"String"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[4,"Config"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
